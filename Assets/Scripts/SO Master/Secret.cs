using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// SO for Secrets. Name of SO is the name of the secret, eg. "Paid to Murder"
/// Secrets are generated by the Player and learned by other Actors (Actors don't have secrets themselves)
/// </summary>
[CreateAssetMenu(menuName = "Actor / Secret")]
public class Secret : ScriptableObject
{
    [Tooltip("General purpose descriptor with no ingame use")]
    public string descriptor;
    [Tooltip("Used in tooltips, etc. Keep short. Three words max")]
    public string tag;
    [Tooltip("Which side does the secret apply to")]
    public GlobalSide side;

    [Tooltip("Effects that happen if secret is revealed")]
    public List<Effect> listOfEffects;

    [HideInInspector] public int secretID;                  //dynamically assigned by DataManager.cs on import
    [HideInInspector] public bool isActive;                //true once player gains secret
    [HideInInspector] public int revealedWho;               //actorID of person who revealed the secret
    [HideInInspector] public int revealedWhen;              //turn revealed

    private List<int> listOfActors = new List<int>();       //list of actorID's of actors who know the secret

    /// <summary>
    /// called by SecretManager.cs -> need to reset data back to default settings otherwise will carry over between sessions
    /// </summary>
    public void Initialise()
    {
        isActive = false;
        revealedWho = -1;
        revealedWhen = -1;
        listOfActors.Clear();
    }

    /// <summary>
    /// called when secret removed from Player and removed from game (still in dictionary)
    /// </summary>
    public void ResetSecret()
    {
        listOfActors.Clear();
    }

    /// <summary>
    /// Add the actorID of an actor who has learned of the secret. Checks if already present (doesn't add, warning)
    /// </summary>
    /// <param name="actorID"></param>
    public void AddActor(int actorID)
    {
        if (listOfActors.Exists(x => x == actorID) == false)
        { listOfActors.Add(actorID); }
        else
        { Debug.LogWarningFormat("ActorID {0} already exists in listOfActors", actorID); }
    }

    /// <summary>
    /// returns true if actorID is on list Of actors who already know of the secret, false otherwise
    /// </summary>
    /// <param name="actorID"></param>
    /// <returns></returns>
    public bool CheckActorPresent(int actorID)
    { return listOfActors.Exists(x => x == actorID); }


    /// <summary>
    /// returns number of actors who know of the secret
    /// </summary>
    /// <returns></returns>
    public int CheckNumOfActorsWhoKnow()
    { return listOfActors.Count; }



}
